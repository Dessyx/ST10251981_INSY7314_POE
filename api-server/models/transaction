// api-server/models/transaction.js
const mongoose = require('mongoose');
const { getNextSequence } = require('./counter');

const transactionSchema = new mongoose.Schema({
  transaction_number: { type: Number, unique: true }, 
  // amount must be positive and within business cap
  amount: { 
    type: Number, 
    required: true, 
    min: [0.01, 'Amount must be at least 0.01'], 
    max: [1000000, 'Amount must not exceed 1000000'] 
  },
  // enforce 3-letter uppercase currency; default ZAR
  currency: { 
    type: String, 
    required: true, 
    default: 'ZAR', 
    uppercase: true, 
    
  },
  // recipient identifier 
  recipient: { 
    type: String, 
    required: true, 
    trim: true, 
    minlength: [3, 'Recipient must be 3-20 characters long'], 
    maxlength: [20, 'Recipient must be 3-20 characters long'], 
    match: [/^[A-Za-z0-9 @._-]+$/, 'Recipient may only contain letters, numbers, spaces, and @ . _ -'] 
  },
  // human-readable recipient name
  recipient_name: { 
    type: String, 
    trim: true, 
    minlength: [2, 'Recipient name must be 2-20 characters long'], 
    maxlength: [20, 'Recipient name must be 2-20 characters long'], 
    match: [/^[A-Za-z ,.'-]+$/, 'Recipient name may only contain letters, spaces, comma, period, apostrophe, and hyphen'] 
  },
  // provider/bank name or code
  provider: { 
    type: String, 
    required: true, 
    trim: true, 
    minlength: [2, 'Provider must be 2-10 characters long'], 
    maxlength: [10, 'Provider must be 2-10 characters long'], 
    match: [/^[A-Za-z0-9 _.-]+$/, 'Provider may only contain letters, numbers, spaces, underscore, dot, and hyphen'] 
  },
  // SWIFT/BIC format (8 or 11 chars), always uppercase
  swift_code: { 
    type: String, 
    required: true, 
    trim: true, 
    uppercase: true, 
    match: [/^[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?$/, 'SWIFT/BIC must be 8 or 11 chars: 4 letters bank, 2 letters country, 2 alnum location, optional 3 alnum branch'] 
  },
  
  description: { type: String, default: '', trim: true, maxlength: [200, 'Description must be 200 characters or less'] },
  status: { type: String, enum: ['pending', 'verified', 'completed', 'failed'], default: 'pending' },
  user_id: { type: String },
  user_full_name: { 
    type: String, 
    trim: true, 
    minlength: [2, 'User full name must be 2-20 characters long'], 
    maxlength: [20, 'User full name must be 2-20 characters long'], 
    match: [/^[A-Za-z ,.'-]+$/, 'User full name may only contain letters, spaces, comma, period, apostrophe, and hyphen'] 
  },
  payment_date: { type: Date, default: Date.now },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now }
});


transactionSchema.pre('save', async function(next) {
  this.updated_at = Date.now();
  
  if (this.isNew && !this.transaction_number) {
    try {
      this.transaction_number = await getNextSequence('transaction_id');
    } catch (error) {
      return next(error);
    }
  }
  
  next();
});

module.exports = mongoose.model('Transaction', transactionSchema);
